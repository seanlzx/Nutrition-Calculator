flask --app app
or if app is named app
flask

flask --app app --debug run
or if app is named app
flask --debug run

# doing a select statement should auto commit any changes above??

# nutrients, should have notes, id, preffered timing (1000, 2300, brkfast, lunch, supper, post workout, pre workout)
c.execute()

# create a view for nutrients and list foods in order of amount per gram

c.execute("INSERT INTO food VALUES('eggs', 5000)")

# commits the current transaction
conn.commit()

when deleting from database, remember to delete the 'to' tables as while.
or just make an active/-inactive column instead

# food catergories

# have it so when a sub category is checked, the parent categories are autochecked too 

# food class
# include calories, porteins, fats, carbs; vitamins; minerals; other chemicals (caffeine, alchohol) notes on storage, preparation

# nutrition class
# various types of fats (omega 3, trans fat, saturated fat,) types of sugars, types of anti oxidants, fibre

# meal class
# include timing, list of foods, meal category (breakfast, lunch, dinner, pre strength training, )

# daily value
# include minimum and suggested amounts BASED ON WEIGHT and GENDER, should give warning if possible harmful overdose amount

# daily and meal nutrition goals
# configurable view to adjust goal amounts of macros and micros and others(antioxidants, caffeine, omega 3)

# daily consumption log, a list of meals and their total daily value

list to add preworkout, postworkout, heavyday, lightday, cardioday, breakfast, lunch, supper,

from datetime import datetime
datetime.now().strftime("%Y/%m/%d %H:%M:%S")
2022/11/06 23:59:59

CSV to SQLite
    if table already exist
        in the CSV file, all the the rows will be used, so ensure the the first row is data and not column names

    if table doesn't already exist
        in the CSV file, the first row will be used as column names

    sqlite> .mode csv
    sqlite> .import example.csv tableName

    if existing table has an auto incrementing primary key
        --import the csv without the id column into a temporary table
        .import example.csv temp_table;
        INSERT INTO example(column1, column2) SELECT * FROM temp_table(column1, column2);

    /* beautify outputs */
    sqlite> .mode column


SELECT ch.id AS header_id, ch.name AS header, c.id AS category_id, c.name AS category 
FROM category c, category_header ch, category_to_category_header ctch
WHERE ctch.category_id = c.id
AND ctch.category_header_id = ch.id  
;

SELECT 
	nh.id AS header_id, nh.name AS header, n.id AS nutrient_id, n.name AS nutrient_name, 
	n.description AS description, dri.rda AS rda, dri.ul AS ul
FROM
	nutrient n JOIN nutrient_to_nutrient_header ntnh
	ON n.id = ntnh.nutrient_id
	JOIN nutrient_header nh
	ON nh.id = ntnh.nutrient_header_id
	JOIN dri
	ON dri.nutrient_id = n.id
	;